@{
	ViewData["Title"] = "Permission";
	Layout = "~/Areas/Admin/Views/Shared/_LayuiLayout.cshtml";
}

<div class="layui-fluid">
 <div class="layui-card">
  <div class="layui-form layui-card-header layuiadmin-card-header-auto">

   <div class="layui-form-item">
	<label class="layui-form-label">上级菜单</label>
	<div class="layui-input-inline">
	 <div id="PermissionParent"></div>
	</div>
   </div>


  </div>

  <div class="layui-card-body">
   <div style="padding-bottom: 10px;">
	<button class="layui-btn layuiadmin-btn-event" data-type="query">查询</button>
	<button class="layui-btn layuiadmin-btn-event layui-btn-danger" data-type="delete">删除</button>
	<button class="layui-btn layuiadmin-btn-event" data-type="add">添加</button>
   </div>

   <table id="table-permission" lay-filter="table-permission"></table>


   <script type="text/html" id="table-action">
	<a class="layui-btn layui-btn-normal layui-btn-xs" lay-event="edit"><i class="layui-icon layui-icon-edit"></i>编辑</a>
	<a class="layui-btn layui-btn-danger layui-btn-xs" lay-event="del"><i class="layui-icon layui-icon-delete"></i>删除</a>
   </script>

  </div>
 </div>
</div>

@section scripts{
<script>
	layui.config({
		base: '/lib/layuiExtend/' //假设这是你存放拓展模块的根目录
	}).extend({ //设定模块别名
		treeTable: 'treetable-lay/treeTable', //如果 mymod.js 是在根目录，也可以不用设定别名
		xmSelect: 'xm-select/xm-select'
	});
	layui.use(['jquery', 'treeTable', 'xmSelect'], function () {
		let table = layui.table,
			$ = layui.jquery,
			treeTable = layui.treeTable,
			xmSelect = layui.xmSelect,
			laypage = layui.laypage;

			


		const [SelectBoxURL, TableURL, DeleteURL, CreateURL, UpdateURL,ShowDialogURL]= [
			"/Admin/SystemBasis/PermissionSelectBox",
			'/Admin/SystemBasis/PermissionTable',
			'/Admin/Permission/DeleteByIds',
			"/Admin/User/PermissionCreate",
			"/Admin/Permission/Update",
			'/Admin/SystemBasis/PermissionDialog'
		];

	
        var PermissionSelectBox = xmSelect.render({
            el: '#PermissionParent',
            name: "PermissionParent",
            model: { label: { type: 'text' } },
            tree: {
                //是否显示树状结构
                show: true,
                //是否展示三角图标
                showFolderIcon: true,
                //是否显示虚线
                showLine: true,
                //间距
                indent: 10,
                //默认展开节点的数组, 为 true 时, 展开所有节点
                expandedKeys: true,
                //是否严格遵守父子模式
                strict: false,
                //是否开启极简模式
                simple: false,
                //点击节点是否展开
                clickExpand: true,
                //点击节点是否选中
                clickCheck: true
            },
            on: function (data) {
                if (data.isAdd) {
                    return data.change.slice(0, 1)
                }
            },
            height: 'auto'
        });
		//选择父级权限
		$.ajax({
			type: "get",
            url: SelectBoxURL,
			dataType: "json",
			async: false,
			success: function (result) {
				PermissionSelectBox.update({
					data: result,
					autoRow: true,
				});
               
			},
			error: function (jqXHR) {
				alert("发生错误：" + jqXHR.status);
			}
		});



		// 字段配置
		const tableCols = [[
			{ type: 'checkbox', fixed: 'left' },
			{ field: 'permissionId', title: '权限编号' },
			{ field: 'permissionName', title: '权限名称' },
			{ field: 'permissionTypeName', title: '权限类型' },
			{ field: 'permissionAction', title: '权限动作' },
			{ field: 'PermissionParentName', title: '权限父级' },
			{ field: 'isValid', title: '是否有效' },
			{ title: '操作', width: 150, align: 'center', fixed: 'right', toolbar: '#table-action' }
		]];


		// 渲染树形表格
		var permissionTable = treeTable.render({
			elem: '#table-permission',
			tree: {
				iconIndex: 1,           // 折叠图标显示在第几列
				isPidData: true,        // 是否是id、pid形式数据
				idName: 'permissionId',  // id字段名称
				pidName: 'permissionParentId'     // pid字段名称
			},
			page:true,
			cols: tableCols
		});




		treeTable.on('tool(table-permission)', function (obj) {

			switch (obj.event) {
				case 'edit':
					
					ShowDialogAction(obj.data);
					break;
				case 'del':
					let permissionIds = new Array([obj.data.permissionId]);
					ajaxDeleteAction(permissionIds);
					break;
			};
		});


	let page_index=0,page_size=0;


		//事件
		let active = {
			query: () => {
				let selectArr = PermissionSelectBox.getValue('valueStr');
				treeTable.reload('table-permission', {
					url: TableURL,
					where: {
						parentId: selectArr
					}
				});
			},
			delete: () => {
				let checkData = permissionTable.checkStatus(false);
				let permissionIds = new Array()
				for (var i = 0; i < checkData.length; i++) {
					permissionIds.push(checkData[i].permissionId);
				}
				//执行 Ajax 后重载
				DeleteAction(permissionIds);
			},
			add: () => ShowDialogAction()
		}
		$('.layui-btn.layuiadmin-btn-event').on('click', function () {
			var type = $(this).data('type');
			active[type] ? active[type].call(this) : '';
		});


		const DeleteAction = (permissionIds) => {

			if (permissionIds.length === 0) {
				return layer.msg('请选择数据');
			}
			layer.confirm('确定删除吗？', function (index) {

				$.ajax({
					type: 'Delete',
					url: DeleteURL,
					/* contentType: 'application/json',*/
					data: { Ids: permissionIds },
					dataType: 'json',
					headers: {},
					success: function (result) {
						if (result.status) {
							treeTable.reload('table-permission');
							layer.alert(result.msg);
						}
						else {
							layer.msg(result.msg);
						}
					},
					error: function (e, msg) {
						alert('数据接口请求异常：' + msg);
					}
				});
			});
		}

		const ShowDialogAction = (formObj) => {

			let ActionUrl = CreateURL;
			let formTitle = "添加权限";
			let actionType = "POST"
			let identification = "";
			if (formObj != null && formObj != undefined)
			{
				ActionUrl = UpdateURL;
				formTitle = "编辑权限"
				actionType = "Put"
				identification = formObj.permissionId;
			}

			let index = layer.open({
				type: 2,
				title: formTitle,
				area: ['auto', '80%'],
				content: ShowDialogURL,
				btn: ['确定', '取消'],
				success: (layero, index)=> {

					var iframe = window['layui-layer-iframe' + index];
					iframe.ShowDialog_Load(formObj);
				},
				yes: function (index, layero) {
					let iframeWindow = window['layui-layer-iframe' + index]
						, submit = layero.find('iframe').contents().find("#luo-submit");


					//监听提交
					iframeWindow.layui.form.on('submit(luo-submit)', function (data) {
						let field = data.field; //获取提交的字段
						//提交 Ajax 成功后，静态更新表格中的数据
						$.ajax({
							type: actionType,
							url: ActionUrl,
							data: {
								PermissionId: identification,
								PermissionName: field.PermissionName,
								PermissionType: field.PermissionType,
								PermissionAction: field.PermissionAction,
								PermissionParentId: field.PermissionParentId,
								IsValid: field.IsValid,
							},
							dataType: "json",
							success: function (result) {
								if (result.status) {
									treeTable.reload('table-permission');
									layer.close(index); //关闭弹层
								}
								else {
									layer.alert(result.messages);
								}
							},
							error: function (jqXHR) {
								alert("发生错误：" + jqXHR.status);
							}
						});
					});
					submit.trigger('click');
				}
			});
			layer.iframeAuto(index);
		}

	});
</script>
}

